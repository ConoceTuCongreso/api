{
	"info": {
		"_postman_id": "4eb2ca7d-1020-4a16-9342-aa051e7a7eb0",
		"name": "api-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sign up",
			"description": null,
			"item": [
				{
					"name": "Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01aac61f-cf5e-4101-a3cc-b6da15b553e0",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body contains \"OK\"', () => {",
									"    pm.expect(pm.response.text()).to.include('OK');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Juan\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"jperez1\",\n\t\"email\": \"jperez@gmail.com\",\n\t\"password\": \"Sup3rS3cr3t!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "152acaa7-d6b0-4105-b321-9abbe7c15c65",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 409', () => {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test('Response body contains \"Username and/or email already registered\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Username and/or email already registered');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Laura\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"lperez1\",\n\t\"email\": \"lperez@gmail.com\",\n\t\"password\": \"Sup3rS3cr3t!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab57899c-cf99-4fd4-b512-0cacd0165e00",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body contains \"Invalid email\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Invalid email');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Pedro\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"pperez1\",\n\t\"email\": \"notAnEmail\",\n\t\"password\": \"Sup3rS3cr3t!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "403bd0c9-bac1-487e-ab2b-a1293843e06e",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body contains \"Password is too weak\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Password is too weak');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Pedro\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"pperez1\",\n\t\"email\": \"jperez@gmail.com\",\n\t\"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"description": null,
			"item": [
				{
					"name": "Happy path username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0944784-633c-471c-b5b1-4f51972cdf50",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body is successful', () => {",
									"    pm.expect(pm.response.text()).to.include('OK');",
									"});",
									"",
									"pm.test('Set-Cookie is present', () => {",
									"    pm.response.to.have.header('Set-Cookie');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24b2625e-e1c8-43c0-a713-a96c5ce32c5f",
								"type": "text/javascript",
								"exec": [
									"const scheme = pm.variables.get('SCHEME');",
									"const host = pm.variables.get('HOST');",
									"const port = pm.variables.get('PORT');",
									"const prefix = pm.variables.get('PREFIX');",
									"const body = {",
									"\tfirst_name: 'Hermes',",
									"\tlast_name: 'Espinola',",
									"\tmiddle_name: 'Gonzalez',",
									"\tusername: 'memes97',",
									"\temail: 'memes97@gmail.com',",
									"\tpassword: 'SoyHermes!',",
									"};",
									"const preRequest = {",
									"    url: `${scheme}://${host}:${port}${prefix}/signup`,",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/json' },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body),",
									"    },",
									"};",
									"",
									"pm.sendRequest(preRequest);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"memes97\",\n\t\"password\": \"SoyHermes!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Happy path email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d3ade1-3a54-4e75-be70-e6881670b456",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body is successful', () => {",
									"    pm.expect(pm.response.text()).to.include('OK');",
									"});",
									"",
									"pm.test('Set-Cookie is present', () => {",
									"    pm.response.to.have.header('Set-Cookie');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"memes97@gmail.com\",\n\t\"password\": \"SoyHermes!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bee745bd-506d-4ce4-bd97-1f9eb8d2b1c5",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 401', () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response body contains \"Invalid username/email and/or password\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Invalid username/email and/or password');",
									"})",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"notmyemail@gmail.com\",\n\t\"password\": \"Sup3rS3cr3t\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb0f9108-7075-48fa-96c0-9d2dfd90e4fd",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 401', () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response body contains \"Invalid username/email and/or password\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Invalid username/email and/or password');",
									"})",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"lperez@gmail.com\",\n\t\"password\": \"N0tmyP4ssw0rd\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"description": null,
			"item": [
				{
					"name": "Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcda4d51-9bda-409f-87fb-fb049c8f26ee",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 205', () => {",
									"    pm.response.to.have.status(205);",
									"});",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26a0ce93-001a-47f5-a30b-903da45132aa",
								"type": "text/javascript",
								"exec": [
									"const scheme = pm.variables.get('SCHEME');",
									"const host = pm.variables.get('HOST');",
									"const port = pm.variables.get('PORT');",
									"const prefix = pm.variables.get('PREFIX');",
									"const body = {",
									"\tfirst_name: 'Martín',",
									"\tlast_name: 'Moscosa',",
									"\tmiddle_name: 'Martínez',",
									"\tusername: 'mmoscosa1',",
									"\temail: 'mmoscosa@gmail.com',",
									"\tpassword: 'Sup3rS3cr3t!',",
									"};",
									"const preRequest = {",
									"    url: `${scheme}://${host}:${port}${prefix}/signup`,",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/json' },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body),",
									"    },",
									"};",
									"",
									"pm.sendRequest(preRequest, (err, response) => {",
									"    let cookie = response.header['set-cookie']",
									"    pm.variables.set('COOKIE', cookie);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/logout",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20ecaa40-c383-40f2-b839-418f064995b3",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 205', () => {",
									"    pm.response.to.have.status(205);",
									"});",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/logout",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Initiatives",
			"description": null,
			"item": [
				{
					"name": "Happy path one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7035d90a-2281-401a-ba59-7c1e50d3487a",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});",
									"",
									"const schema = {",
									"    \"id\": {",
									"        \"type\": \"number\"",
									"    },",
									"    \"description\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"document_url\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"author\": {",
									"        \"type\": \"string\"",
									"    },",
									"    \"infolej_number\": {",
									"        \"type\": \"string\"",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test(`Schema contains fields ${Object.keys(schema)}`, () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});",
									"",
									"const bodyJSON = JSON.parse(body);",
									"pm.test('id equals \"1\"', () => {",
									"    pm.expect(bodyJSON.id).to.equal('1');",
									"});",
									"",
									"pm.test('description equals \"Iniciativa número uno\"', () => {",
									"    pm.expect(bodyJSON.description).to.equal('Iniciativa número uno');",
									"});",
									"",
									"pm.test('status equals \"Activa\"', () => {",
									"    pm.expect(bodyJSON.status).to.equal('Activa');",
									"});",
									"",
									"pm.test('document_url equals \"http://congresoweb.congresojal.gob.mx\"', () => {",
									"    pm.expect(bodyJSON.document_url).to.equal('http://congresoweb.congresojal.gob.mx');",
									"});",
									"",
									"pm.test('author equals \"José Guadalupe Posada\"', () => {",
									"    pm.expect(bodyJSON.author).to.equal('José Guadalupe Posada');",
									"});",
									"",
									"pm.test('infolej_number equals \"001\"', () => {",
									"    pm.expect(bodyJSON.infolej_number).to.equal('001');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a28b67d-315d-494e-8e55-c963ae385817",
								"type": "text/javascript",
								"exec": [
									"const iniciativeID = '1';",
									"pm.variables.set('INITIATIVE_ID', iniciativeID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives/{{INITIATIVE_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives",
								"{{INITIATIVE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-existent iniciative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "133decdb-2d35-4232-abf7-2f489f971041",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 404', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response body contains \"Initiative with ID 10 not found\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Initiative with ID 10 not found');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8998d6c0-6965-436c-8054-d0db7303bdc9",
								"type": "text/javascript",
								"exec": [
									"const iniciativeID = '10';",
									"pm.variables.set('INITIATIVE_ID', initiativeID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives/{{INITIATIVE_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives",
								"{{INITIATIVE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Happy path category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03922ae0-eafa-41e5-83b1-be5566c526c7",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"id\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"document_url\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"infolej_number\": {",
									"            \"type\": \"string\"",
									"        },",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test('Schema is an array of initiatives', () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});l",
									"",
									"const areEqual = (a, b) => {",
									"  return a.id === b.id &&",
									"    a.description === b.description &&",
									"    a.status === b.status &&",
									"    a.document_url === b.document_url &&",
									"    a.author === b.author &&",
									"    a.infolej_number === b.infolej_number",
									"};",
									"",
									"const bodyJSON = JSON.parse(body);",
									"const initiativeOne = {",
									"    id: '1',",
									"    description: 'Iniciativa número uno',",
									"    document_url: 'http://congresoweb.congresojal.gob.mx',",
									"    author: 'José Guadalupe Posada',",
									"    infolej_number: '001',",
									"};",
									"pm.test(`First item equals ${initiativeOne}`, () => {",
									"    pm.expect(areEqual(bodyJSON[0], initiativeOne)).to.be.true;",
									"});",
									"",
									"const initiativeTwo = {",
									"    id: '1',",
									"    description: 'Iniciativa número dos',",
									"    document_url: 'http://congresoweb.congresojal.gob.mx',",
									"    author: 'José Arango Arámbula',",
									"    infolej_number: '002',",
									"};",
									"pm.test(`Second item equals ${initiativeTwo}`, () => {",
									"    pm.expect(areEqual(bodyJSON[1], initiativeTwo)).to.be.true;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57a331ad-c315-4b71-bf4e-b97e8528e83a",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '1';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29a41fd3-6671-4716-84ea-22e0958e07ff",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"id\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"description\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"status\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"document_url\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"author\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"infolej_number\": {",
									"            \"type\": \"string\"",
									"        },",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test('Schema is an array of initiatives', () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});l",
									"",
									"const bodyJSON = JSON.parse(body);",
									"pm.test('List is empty', () => {",
									"    pm.expect(bodyJSON.length).to.equal(0);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7831c584-f8b4-4f18-b2e8-82c56740c952",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '2';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-existent category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e394585-0cab-4dbe-b0fd-f3382ee44f32",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 404', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response body contains \"Category with ID 10 not found\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Category with ID 10 not found');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b380ca68-5cfb-4265-801a-6e76cbc3726f",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '10';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73420747-1dce-4526-8c11-070d8a45623f",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body contains \"Missing required parameter \\'category_id\\'\"', () => {",
									"    pm.expect(pm.response.text()).to.include('Missing required parameter \\'category_id\\'');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40f95b6d-9053-4942-b64b-22bbd03c8816",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}