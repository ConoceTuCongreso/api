{
	"info": {
		"_postman_id": "85a6fb2d-2e47-466a-8c99-79568e50a813",
		"name": "api-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sign up",
			"description": null,
			"item": [
				{
					"name": "Existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40e7905e-b6ea-4353-8a3e-8358d0af62e1",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 409', () => {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test('Response body equals \"Username and/or email already registered\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Username and/or email already registered');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Laura\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"lperez1\",\n\t\"email\": \"lperez@gmail.com\",\n\t\"password\": \"Sup3rS3cr3t!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8168ed11-ba23-4214-8d70-d8d3e136f4cc",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body equals \"Invalid email\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Invalid email');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Pedro\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"pperez1\",\n\t\"email\": \"notAnEmail\",\n\t\"password\": \"Sup3rS3cr3t!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e60255a-180b-42e4-847e-5c1931926b9c",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body equals \"Password is too weak\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Password is too weak');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"Pedro\",\n\t\"last_name\": \"Pérez\",\n\t\"middle_name\": \"López\",\n\t\"username\": \"pperez1\",\n\t\"email\": \"jperez@gmail.com\",\n\t\"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/signup",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"description": null,
			"item": [
				{
					"name": "Happy path username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "186e8037-fd62-4fc2-b039-3b385cd69e17",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body equals \"OK\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('OK');",
									"});",
									"",
									"pm.test('Set-Cookie is present', () => {",
									"    pm.response.to.have.header('Set-Cookie');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24b2625e-e1c8-43c0-a713-a96c5ce32c5f",
								"type": "text/javascript",
								"exec": [
									"const scheme = pm.variables.get('SCHEME');",
									"const host = pm.variables.get('HOST');",
									"const port = pm.variables.get('PORT');",
									"const prefix = pm.variables.get('PREFIX');",
									"const body = {",
									"\tfirst_name: 'Hermes',",
									"\tlast_name: 'Espinola',",
									"\tmiddle_name: 'Gonzalez',",
									"\tusername: 'memes97',",
									"\temail: 'memes97@gmail.com',",
									"\tpassword: 'SoyHermes!',",
									"};",
									"const preRequest = {",
									"    url: `${scheme}://${host}:${port}${prefix}/signup`,",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/json' },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body),",
									"    },",
									"};",
									"",
									"pm.sendRequest(preRequest);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"memes97\",\n\t\"password\": \"SoyHermes!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Happy path email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46a33dbb-3819-4e80-8435-b6e5c07a911a",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response body equals \"OK\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('OK');",
									"});",
									"",
									"pm.test('Set-Cookie is present', () => {",
									"    pm.response.to.have.header('Set-Cookie');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"memes97@gmail.com\",\n\t\"password\": \"SoyHermes!\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34ad39fc-31ff-40a6-950b-0d8e5891cab2",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 401', () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response body equals \"Invalid username/email and/or password\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Invalid username/email and/or password');",
									"})",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"notmyemail@gmail.com\",\n\t\"password\": \"Sup3rS3cr3t\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49b5b26e-93ec-42e6-94d5-fbc4dc38fab5",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 401', () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Response body equals \"Invalid username/email and/or password\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Invalid username/email and/or password');",
									"})",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"lperez@gmail.com\",\n\t\"password\": \"N0tmyP4ssw0rd\"\n}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/login",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout",
			"description": null,
			"item": [
				{
					"name": "Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcda4d51-9bda-409f-87fb-fb049c8f26ee",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 205', () => {",
									"    pm.response.to.have.status(205);",
									"});",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26a0ce93-001a-47f5-a30b-903da45132aa",
								"type": "text/javascript",
								"exec": [
									"const scheme = pm.variables.get('SCHEME');",
									"const host = pm.variables.get('HOST');",
									"const port = pm.variables.get('PORT');",
									"const prefix = pm.variables.get('PREFIX');",
									"const body = {",
									"\tfirst_name: 'Martín',",
									"\tlast_name: 'Moscosa',",
									"\tmiddle_name: 'Martínez',",
									"\tusername: 'mmoscosa1',",
									"\temail: 'mmoscosa@gmail.com',",
									"\tpassword: 'Sup3rS3cr3t!',",
									"};",
									"const preRequest = {",
									"    url: `${scheme}://${host}:${port}${prefix}/signup`,",
									"    method: 'POST',",
									"    header: { 'Content-Type': 'application/json' },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body),",
									"    },",
									"};",
									"",
									"pm.sendRequest(preRequest, (err, response) => {",
									"    let cookie = response.header['set-cookie']",
									"    pm.variables.set('COOKIE', cookie);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/logout",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20ecaa40-c383-40f2-b839-418f064995b3",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 205', () => {",
									"    pm.response.to.have.status(205);",
									"});",
									"",
									"pm.test('Set-Cookie is not present', () => {",
									"    pm.response.to.not.have.header('Set-Cookie');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e86aee1-709f-4544-b971-2c8a5bf527b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/logout",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Initiatives",
			"description": null,
			"item": [
				{
					"name": "Happy path one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f36a111f-29e6-4bc5-be22-14d5018c084d",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    id: {",
									"        type: 'number',",
									"    },",
									"    description: {",
									"        type: 'string',",
									"    },",
									"    status: {",
									"        type: 'string',",
									"    },",
									"    document_url: {",
									"        type: 'string',",
									"    },",
									"    author: {",
									"        type: 'string',",
									"    },",
									"    infolej_number: {",
									"        type: 'string',",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test(`Schema contains fields ${Object.keys(schema)}`, () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});",
									"",
									"const bodyJSON = JSON.parse(body);",
									"pm.test('id equals \"1\"', () => {",
									"    pm.expect(bodyJSON.id).to.equal('1');",
									"});",
									"",
									"pm.test('description equals \"Iniciativa número uno\"', () => {",
									"    pm.expect(bodyJSON.description).to.equal('Iniciativa número uno');",
									"});",
									"",
									"pm.test('status equals \"Activa\"', () => {",
									"    pm.expect(bodyJSON.status).to.equal('Activa');",
									"});",
									"",
									"pm.test('document_url equals \"http://congresoweb.congresojal.gob.mx\"', () => {",
									"    pm.expect(bodyJSON.document_url).to.equal('http://congresoweb.congresojal.gob.mx');",
									"});",
									"",
									"pm.test('author equals \"José Guadalupe Posada\"', () => {",
									"    pm.expect(bodyJSON.author).to.equal('José Guadalupe Posada');",
									"});",
									"",
									"pm.test('infolej_number equals \"001\"', () => {",
									"    pm.expect(bodyJSON.infolej_number).to.equal('001');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a28b67d-315d-494e-8e55-c963ae385817",
								"type": "text/javascript",
								"exec": [
									"const iniciativeID = '1';",
									"pm.variables.set('INITIATIVE_ID', iniciativeID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives/{{INITIATIVE_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives",
								"{{INITIATIVE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-existent iniciative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fde3ab17-a99a-4efd-a817-ff2861e4eef2",
								"exec": [
									"pm.test('Response code is 404', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response body equals \"Initiative with ID 10 not found\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Initiative with ID 10 not found');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8998d6c0-6965-436c-8054-d0db7303bdc9",
								"exec": [
									"const initiativeID = '10';",
									"pm.variables.set('INITIATIVE_ID', initiativeID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives/{{INITIATIVE_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives",
								"{{INITIATIVE_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Happy path category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "177847cc-0bea-44b8-b8c8-c18bcc0fa15b",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    items: {",
									"        id: {",
									"            type: 'number',",
									"        },",
									"        description: {",
									"            type: 'string',",
									"        },",
									"        status: {",
									"            type: 'string',",
									"        },",
									"        document_url: {",
									"            type: 'string',",
									"        },",
									"        author: {",
									"            type: 'string',",
									"        },",
									"        infolej_number: {",
									"            type: 'string',",
									"        },  ",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test('Schema is an array of initiatives', () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});",
									"",
									"const areEqual = (a, b) => {",
									"  return a.id === b.id &&",
									"    a.description === b.description &&",
									"    a.status === b.status &&",
									"    a.document_url === b.document_url &&",
									"    a.author === b.author &&",
									"    a.infolej_number === b.infolej_number;",
									"};",
									"",
									"const bodyJSON = JSON.parse(body);",
									"const initiativeOne = {",
									"    id: '1',",
									"    description: 'Iniciativa número uno',",
									"    status: 'Activa',",
									"    document_url: 'http://congresoweb.congresojal.gob.mx',",
									"    author: 'José Guadalupe Posada',",
									"    infolej_number: '001',",
									"};",
									"pm.test(`First item equals ${initiativeOne}`, () => {",
									"    pm.expect(areEqual(bodyJSON[0], initiativeOne)).to.be.true;",
									"});",
									"",
									"const initiativeTwo = {",
									"    id: '2',",
									"    description: 'Iniciativa número dos',",
									"    status: 'Activa',",
									"    document_url: 'http://congresoweb.congresojal.gob.mx',",
									"    author: 'José Arango Arámbula',",
									"    infolej_number: '002',",
									"};",
									"pm.test(`Second item equals ${initiativeTwo}`, () => {",
									"    pm.expect(areEqual(bodyJSON[1], initiativeTwo)).to.be.true;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57a331ad-c315-4b71-bf4e-b97e8528e83a",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '1';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9047a89e-6514-4ddc-aeca-92d7900f23bb",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    items: {",
									"        id: {",
									"            type: 'number',",
									"        },",
									"        description: {",
									"            type: 'string',",
									"        },",
									"        status: {",
									"            type: 'string',",
									"        },",
									"        document_url: {",
									"            type: 'string',",
									"        },",
									"        author: {",
									"            type: 'string',",
									"        },",
									"        infolej_number: {",
									"            type: 'string',",
									"        },  ",
									"    },",
									"};",
									"const body = pm.response.text();",
									"pm.test('Schema is an array of initiatives', () => {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});",
									"",
									"const bodyJSON = JSON.parse(body);",
									"pm.test('List is empty', () => {",
									"    pm.expect(bodyJSON.length).to.equal(0);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7831c584-f8b4-4f18-b2e8-82c56740c952",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '2';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Non-existent category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "462620b1-f85a-4264-bf3b-6168e0e22007",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 404', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Response body equals \"Category with ID 10 not found\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Category with ID 10 not found');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b380ca68-5cfb-4265-801a-6e76cbc3726f",
								"type": "text/javascript",
								"exec": [
									"const categoryID = '10';",
									"pm.variables.set('CATEGORY_ID', categoryID);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives?category_id={{CATEGORY_ID}}",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							],
							"query": [
								{
									"key": "category_id",
									"value": "{{CATEGORY_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4251815e-96be-4b45-bb78-922e70e3262d",
								"type": "text/javascript",
								"exec": [
									"pm.test('Response code is 400', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Response body equals \"Missing required parameter \\'category_id\\'\"', () => {",
									"    pm.expect(pm.response.text()).to.equal('Missing required parameter \\'category_id\\'');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40f95b6d-9053-4942-b64b-22bbd03c8816",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{COOKIE}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{SCHEME}}://{{HOST}}:{{PORT}}{{PREFIX}}/initiatives",
							"protocol": "{{SCHEME}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}{{PREFIX}}",
							"path": [
								"initiatives"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}